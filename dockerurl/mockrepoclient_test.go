// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package dockerurl_test

import (
	context "context"

	github "github.com/google/go-github/v32/github"

	mock "github.com/stretchr/testify/mock"
)

// mockRepoClient is an autogenerated mock type for the repoClient type
type mockRepoClient struct {
	mock.Mock
}

// ListReleases provides a mock function with given fields: ctx, owner, repo, opts
func (_m *mockRepoClient) ListReleases(ctx context.Context, owner string, repo string, opts *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, opts)

	var r0 []*github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.RepositoryRelease); ok {
		r0 = rf(ctx, owner, repo, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(ctx, owner, repo, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(ctx, owner, repo, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
