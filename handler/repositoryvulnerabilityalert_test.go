package handler_test

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/thepwagner/action-update-go/handler"
)

func TestVulnerabilityAlert_InRange(t *testing.T) {
	cases := map[string]struct {
		AffectedRange string
		InRange       []string
		NotInRange    []string
	}{
		"less than": {
			AffectedRange: "< 1.0.0",
			InRange:       []string{"0.9", "0.9.9"},
			NotInRange:    []string{"1.0", "1.0.0", "1.0.1", "1.1.0"},
		},
		"less than equal": {
			AffectedRange: "<= 1.0.0",
			InRange:       []string{"0.9", "0.9.9", "1.0", "1.0.0"},
			NotInRange:    []string{"1.0.1", "1.1.0"},
		},
		"greater than": {
			AffectedRange: "> 1.0.0",
			InRange:       []string{"1.0.1", "1.1.0"},
			NotInRange:    []string{"0.9", "0.9.9", "1.0", "1.0.0"},
		},
		"greater than equal": {
			AffectedRange: ">= 1.0.0",
			InRange:       []string{"1.0", "1.0.0", "1.0.1", "1.1.0"},
			NotInRange:    []string{"0.9", "0.9.9"},
		},
		"greater than equal, less than": {
			AffectedRange: ">= 1.0.0, < 1.1.0",
			InRange:       []string{"1.0", "1.0.0", "1.0.1"},
			NotInRange:    []string{"0.9", "0.9.9", "1.1.0"},
		},
	}

	for label, tc := range cases {
		va := handler.VulnerabilityAlert{AffectedRange: tc.AffectedRange}

		for _, v := range tc.InRange {
			t.Run(fmt.Sprintf("%s - %s", label, v), func(t *testing.T) {
				assert.True(t, va.InRange(v))
			})
		}

		for _, v := range tc.NotInRange {
			t.Run(fmt.Sprintf("%s - %s", label, v), func(t *testing.T) {
				assert.False(t, va.InRange(v))
			})
		}
	}
}

func TestVulnerabilityAlert_Invert(t *testing.T) {
	cases := map[string]struct {
		AffectedRange string
		Expected      string
	}{
		"less than": {
			AffectedRange: "< 1.0.0",
			Expected:      ">=v1.0.0",
		},
		"less than equal": {
			AffectedRange: "<= 1.0.0",
			Expected:      ">v1.0.0",
		},
		"greater than": {
			AffectedRange: "> 1.0.0",
			Expected:      "<=v1.0.0",
		},
		"greater than equal": {
			AffectedRange: ">= 1.0.0",
			Expected:      "<v1.0.0",
		},
		"greater than equal, less than": {
			AffectedRange: ">= 1.0.0, < 1.1.0",
			Expected:      "<v1.0.0, >=v1.1.0",
		},
	}
	for label, tc := range cases {
		t.Run(label, func(t *testing.T) {
			va := handler.VulnerabilityAlert{AffectedRange: tc.AffectedRange}

			assert.Equal(t, tc.Expected, va.Invert())
		})
	}
}
