// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package updater_test

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	update "github.com/thepwagner/action-update-go/updater"
)

// mockRepo is an autogenerated mock type for the Repo type
type mockRepo struct {
	mock.Mock
}

// Branch provides a mock function with given fields:
func (_m *mockRepo) Branch() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewBranch provides a mock function with given fields: baseBranch, _a1
func (_m *mockRepo) NewBranch(baseBranch string, _a1 update.Update) error {
	ret := _m.Called(baseBranch, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, update.Update) error); ok {
		r0 = rf(baseBranch, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Parse provides a mock function with given fields: _a0
func (_m *mockRepo) Parse(_a0 string) (string, *update.Update) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *update.Update
	if rf, ok := ret.Get(1).(func(string) *update.Update); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*update.Update)
		}
	}

	return r0, r1
}

// Push provides a mock function with given fields: _a0, _a1
func (_m *mockRepo) Push(_a0 context.Context, _a1 update.Update) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, update.Update) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Root provides a mock function with given fields:
func (_m *mockRepo) Root() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetBranch provides a mock function with given fields: branch
func (_m *mockRepo) SetBranch(branch string) error {
	ret := _m.Called(branch)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(branch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Updates provides a mock function with given fields: _a0
func (_m *mockRepo) Updates(_a0 context.Context) (update.UpdatesByBranch, error) {
	ret := _m.Called(_a0)

	var r0 update.UpdatesByBranch
	if rf, ok := ret.Get(0).(func(context.Context) update.UpdatesByBranch); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(update.UpdatesByBranch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
