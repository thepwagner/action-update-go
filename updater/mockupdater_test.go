// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package updater_test

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	update "github.com/thepwagner/action-update-go/updater"
)

// mockUpdater is an autogenerated mock type for the Updater type
type mockUpdater struct {
	mock.Mock
}

// ApplyUpdate provides a mock function with given fields: _a0, _a1
func (_m *mockUpdater) ApplyUpdate(_a0 context.Context, _a1 update.Update) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, update.Update) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Check provides a mock function with given fields: _a0, _a1
func (_m *mockUpdater) Check(_a0 context.Context, _a1 update.Dependency) (*update.Update, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *update.Update
	if rf, ok := ret.Get(0).(func(context.Context, update.Dependency) *update.Update); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*update.Update)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, update.Dependency) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dependencies provides a mock function with given fields: _a0
func (_m *mockUpdater) Dependencies(_a0 context.Context) ([]update.Dependency, error) {
	ret := _m.Called(_a0)

	var r0 []update.Dependency
	if rf, ok := ret.Get(0).(func(context.Context) []update.Dependency); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]update.Dependency)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
